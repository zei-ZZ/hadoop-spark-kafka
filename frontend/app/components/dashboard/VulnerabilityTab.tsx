"use client";

import { useState } from "react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { ChevronDown, ChevronUp, Search, AlertTriangle, BarChart2, Globe } from "lucide-react";

interface VulnerabilityData {
    country: string;
    disasterCount: number;
    totalDeaths: number;
    totalDamage: number;
    avgRecoveryDays: number;
    vulnerabilityIndex: number;
}

// Mock data for demonstration
const mockData: VulnerabilityData[] = [
    {
        country: "Haiti",
        disasterCount: 42,
        totalDeaths: 230000,
        totalDamage: 8500000,
        avgRecoveryDays: 45,
        vulnerabilityIndex: 0.92
    },
    {
        country: "Philippines",
        disasterCount: 156,
        totalDeaths: 185000,
        totalDamage: 12000000,
        avgRecoveryDays: 38,
        vulnerabilityIndex: 0.88
    },
    {
        country: "Indonesia",
        disasterCount: 203,
        totalDeaths: 165000,
        totalDamage: 15000000,
        avgRecoveryDays: 35,
        vulnerabilityIndex: 0.85
    },
    {
        country: "Bangladesh",
        disasterCount: 178,
        totalDeaths: 145000,
        totalDamage: 9500000,
        avgRecoveryDays: 42,
        vulnerabilityIndex: 0.82
    },
    {
        country: "Vietnam",
        disasterCount: 132,
        totalDeaths: 125000,
        totalDamage: 8000000,
        avgRecoveryDays: 30,
        vulnerabilityIndex: 0.78
    },
    // Add more mock data as needed
];

export function VulnerabilityTab() {
    const [searchQuery, setSearchQuery] = useState("");
    const [sortBy, setSortBy] = useState<keyof VulnerabilityData>("vulnerabilityIndex");
    const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc");
    const [currentPage, setCurrentPage] = useState(1);
    const itemsPerPage = 10;

    const handleSort = (column: keyof VulnerabilityData) => {
        if (sortBy === column) {
            setSortDirection(sortDirection === "asc" ? "desc" : "asc");
        } else {
            setSortBy(column);
            setSortDirection("desc");
        }
    };

    const filteredData = mockData.filter(item =>
        item.country.toLowerCase().includes(searchQuery.toLowerCase())
    );

    const sortedData = [...filteredData].sort((a, b) => {
        const aValue = a[sortBy];
        const bValue = b[sortBy];
        const modifier = sortDirection === "asc" ? 1 : -1;
        return aValue < bValue ? -1 * modifier : aValue > bValue ? 1 * modifier : 0;
    });

    const totalPages = Math.ceil(sortedData.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const paginatedData = sortedData.slice(startIndex, startIndex + itemsPerPage);

    const getVulnerabilityBadgeVariant = (index: number) => {
        if (index >= 0.8) return "destructive";
        if (index >= 0.6) return "default";
        if (index >= 0.4) return "secondary";
        return "outline";
    };

    const getVulnerabilityLabel = (index: number) => {
        if (index >= 0.8) return "Critical";
        if (index >= 0.6) return "High";
        if (index >= 0.4) return "Medium";
        return "Low";
    };

    return (
        <div className="space-y-6">
            <Card>
                <CardHeader>
                    <div className="flex items-center justify-between">
                        <div className="space-y-1">
                            <CardTitle className="text-2xl font-semibold tracking-tight flex items-center gap-2">
                                <Globe className="h-5 w-5" />
                                Country Vulnerability Index
                            </CardTitle>
                            <CardDescription className="text-base">
                                Analysis of country-level vulnerability based on disaster impact, economic damage, and recovery time
                            </CardDescription>
                        </div>
                        <div className="relative w-72">
                            <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                            <Input
                                placeholder="Search countries..."
                                value={searchQuery}
                                onChange={(e) => {
                                    setSearchQuery(e.target.value);
                                    setCurrentPage(1);
                                }}
                                className="pl-8"
                            />
                        </div>
                    </div>
                </CardHeader>
                <CardContent>
                    <div className="space-y-4">
                        <div className="grid grid-cols-3 gap-4 mb-6">
                            <Card>
                                <CardHeader className="pb-1 pt-3">
                                    <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                                        <AlertTriangle className="h-4 w-4" />
                                        Total Countries
                                    </CardTitle>
                                </CardHeader>
                                <CardContent className="pt-0 pb-3">
                                    <div className="text-2xl font-bold">{mockData.length}</div>
                                </CardContent>
                            </Card>
                            <Card>
                                <CardHeader className="pb-1 pt-3">
                                    <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                                        <BarChart2 className="h-4 w-4" />
                                        Average Vulnerability
                                    </CardTitle>
                                </CardHeader>
                                <CardContent className="pt-0 pb-3">
                                    <div className="text-2xl font-bold">
                                        {(mockData.reduce((acc, curr) => acc + curr.vulnerabilityIndex, 0) / mockData.length).toFixed(2)}
                                    </div>
                                </CardContent>
                            </Card>
                            <Card>
                                <CardHeader className="pb-1 pt-3">
                                    <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                                        <Globe className="h-4 w-4" />
                                        Critical Countries
                                    </CardTitle>
                                </CardHeader>
                                <CardContent className="pt-0 pb-3">
                                    <div className="text-2xl font-bold">
                                        {mockData.filter(item => item.vulnerabilityIndex >= 0.8).length}
                                    </div>
                                </CardContent>
                            </Card>
                        </div>

                        <div className="rounded-md border">
                            <Table>
                                <TableHeader>
                                    <TableRow className="bg-gray-50 hover:bg-gray-50">
                                        <TableHead
                                            className="text-center cursor-pointer select-none"
                                            onClick={() => handleSort("country")}
                                        >
                                            Country
                                            {sortBy === "country" && (
                                                sortDirection === "asc" ? <ChevronUp className="inline h-4 w-4 ml-1" /> : <ChevronDown className="inline h-4 w-4 ml-1" />
                                            )}
                                        </TableHead>
                                        <TableHead
                                            className="text-center cursor-pointer select-none"
                                            onClick={() => handleSort("disasterCount")}
                                        >
                                            Disaster Count
                                            {sortBy === "disasterCount" && (
                                                sortDirection === "asc" ? <ChevronUp className="inline h-4 w-4 ml-1" /> : <ChevronDown className="inline h-4 w-4 ml-1" />
                                            )}
                                        </TableHead>
                                        <TableHead
                                            className="text-center cursor-pointer select-none"
                                            onClick={() => handleSort("totalDeaths")}
                                        >
                                            Total Deaths
                                            {sortBy === "totalDeaths" && (
                                                sortDirection === "asc" ? <ChevronUp className="inline h-4 w-4 ml-1" /> : <ChevronDown className="inline h-4 w-4 ml-1" />
                                            )}
                                        </TableHead>
                                        <TableHead
                                            className="text-center cursor-pointer select-none"
                                            onClick={() => handleSort("totalDamage")}
                                        >
                                            Total Damage (000 US$)
                                            {sortBy === "totalDamage" && (
                                                sortDirection === "asc" ? <ChevronUp className="inline h-4 w-4 ml-1" /> : <ChevronDown className="inline h-4 w-4 ml-1" />
                                            )}
                                        </TableHead>
                                        <TableHead
                                            className="text-center cursor-pointer select-none"
                                            onClick={() => handleSort("avgRecoveryDays")}
                                        >
                                            Avg Recovery Days
                                            {sortBy === "avgRecoveryDays" && (
                                                sortDirection === "asc" ? <ChevronUp className="inline h-4 w-4 ml-1" /> : <ChevronDown className="inline h-4 w-4 ml-1" />
                                            )}
                                        </TableHead>
                                        <TableHead
                                            className="text-center cursor-pointer select-none"
                                            onClick={() => handleSort("vulnerabilityIndex")}
                                        >
                                            Vulnerability Index
                                            {sortBy === "vulnerabilityIndex" && (
                                                sortDirection === "asc" ? <ChevronUp className="inline h-4 w-4 ml-1" /> : <ChevronDown className="inline h-4 w-4 ml-1" />
                                            )}
                                        </TableHead>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    {paginatedData.map((item) => (
                                        <TableRow key={item.country} className="hover:bg-gray-50">
                                            <TableCell className="text-center font-medium">{item.country}</TableCell>
                                            <TableCell className="text-center">{item.disasterCount.toLocaleString()}</TableCell>
                                            <TableCell className="text-center">{item.totalDeaths.toLocaleString()}</TableCell>
                                            <TableCell className="text-center">{item.totalDamage.toLocaleString()}</TableCell>
                                            <TableCell className="text-center">{item.avgRecoveryDays.toFixed(1)}</TableCell>
                                            <TableCell className="text-center">
                                                <div className="flex items-center justify-center gap-2">
                                                    <span className="font-medium">{item.vulnerabilityIndex.toFixed(2)}</span>
                                                    <Badge variant={getVulnerabilityBadgeVariant(item.vulnerabilityIndex)}>
                                                        {getVulnerabilityLabel(item.vulnerabilityIndex)}
                                                    </Badge>
                                                </div>
                                            </TableCell>
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </div>

                        <div className="flex items-center justify-between pt-4">
                            <p className="text-sm text-muted-foreground">
                                Showing {startIndex + 1} to {Math.min(startIndex + itemsPerPage, sortedData.length)} of {sortedData.length} countries
                            </p>
                            <div className="flex items-center gap-2">
                                <button
                                    onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                                    disabled={currentPage === 1}
                                    className="px-3 py-1 text-sm border rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 transition-colors"
                                >
                                    Previous
                                </button>
                                <span className="text-sm">
                                    Page {currentPage} of {totalPages}
                                </span>
                                <button
                                    onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                                    disabled={currentPage === totalPages}
                                    className="px-3 py-1 text-sm border rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 transition-colors"
                                >
                                    Next
                                </button>
                            </div>
                        </div>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
} 