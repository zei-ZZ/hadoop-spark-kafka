"use client";

import { useState, useEffect } from "react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { ChevronDown, ChevronUp, Search, AlertTriangle, BarChart2, Globe } from "lucide-react";

interface VulnerabilityData {
    Country: string;
    Disaster_Count: number;
    Total_Deaths: number;
    Total_Damage: number;
    Avg_Recovery_Days: number;
    Vulnerability_Index: number;
}

export function VulnerabilityTab() {
    const [searchQuery, setSearchQuery] = useState("");
    const [sortBy, setSortBy] = useState<keyof VulnerabilityData>("Vulnerability_Index");
    const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc");
    const [currentPage, setCurrentPage] = useState(1);
    const itemsPerPage = 10;
    const [data, setData] = useState<VulnerabilityData[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [totalItems, setTotalItems] = useState(0);
    const [stats, setStats] = useState<{ avg_vulnerability: number; critical_count: number }>({
        avg_vulnerability: 0,
        critical_count: 0
    });

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            setError(null);
            try {
                const response = await fetch(
                    `http://localhost:5001/vulnerability?page=${currentPage}&page_size=${itemsPerPage}&country=${searchQuery}&sort_by=${sortBy}&sort_direction=${sortDirection}`
                );
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const result = await response.json();
                setData(result.results);
                setTotalItems(result.pagination.total);
                setStats(result.stats);
            } catch (err) {
                setError(err instanceof Error ? err.message : "Failed to fetch vulnerability data");
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [currentPage, itemsPerPage, searchQuery, sortBy, sortDirection]);

    const handleSort = (column: keyof VulnerabilityData) => {
        if (sortBy === column) {
            setSortDirection(sortDirection === "asc" ? "desc" : "asc");
        } else {
            setSortBy(column);
            setSortDirection("desc");
        }
    };

    const totalPages = Math.ceil(totalItems / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;

    const getVulnerabilityBadgeVariant = (index: number) => {
        if (index >= 0.06) return "destructive";
        if (index >= 0.045) return "default";
        if (index >= 0.0325) return "secondary";
        return "outline";
    };

    const getVulnerabilityLabel = (index: number) => {
        if (index >= 0.06) return "Critical";
        if (index >= 0.045) return "High";
        if (index >= 0.0325) return "Medium";
        return "Low";
    };

    return (
        <div className="space-y-6">
            <Card>
                <CardHeader>
                    <div className="flex items-center justify-between">
                        <div className="space-y-1">
                            <CardTitle className="text-2xl font-semibold tracking-tight flex items-center gap-2">
                                <Globe className="h-5 w-5" />
                                Country Vulnerability Index
                            </CardTitle>
                            <CardDescription className="text-base">
                                Analysis of country-level vulnerability based on disaster impact, economic damage, and recovery time
                            </CardDescription>
                        </div>
                        <div className="relative w-72">
                            <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                            <Input
                                placeholder="Search countries..."
                                value={searchQuery}
                                onChange={(e) => {
                                    setSearchQuery(e.target.value);
                                    setCurrentPage(1);
                                }}
                                className="pl-8"
                            />
                        </div>
                    </div>
                </CardHeader>
                <CardContent>
                    <div className="space-y-4">
                        <div className="grid grid-cols-3 gap-4 mb-6">
                            <Card>
                                <CardHeader className="pb-1 pt-3">
                                    <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                                        <AlertTriangle className="h-4 w-4" />
                                        Total Countries
                                    </CardTitle>
                                </CardHeader>
                                <CardContent className="pt-0 pb-3">
                                    <div className="text-2xl font-bold">{totalItems}</div>
                                </CardContent>
                            </Card>
                            <Card>
                                <CardHeader className="pb-1 pt-3">
                                    <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                                        <BarChart2 className="h-4 w-4" />
                                        Average Vulnerability
                                    </CardTitle>
                                </CardHeader>
                                <CardContent className="pt-0 pb-3">
                                    <div className="text-2xl font-bold">
                                        {stats.avg_vulnerability.toFixed(4)}
                                    </div>
                                </CardContent>
                            </Card>
                            <Card>
                                <CardHeader className="pb-1 pt-3">
                                    <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                                        <Globe className="h-4 w-4" />
                                        Critical Countries
                                    </CardTitle>
                                </CardHeader>
                                <CardContent className="pt-0 pb-3">
                                    <div className="text-2xl font-bold">
                                        {stats.critical_count}
                                    </div>
                                </CardContent>
                            </Card>
                        </div>

                        <div className="rounded-md border">
                            <Table>
                                <TableHeader>
                                    <TableRow className="bg-gray-50 hover:bg-gray-50">
                                        <TableHead
                                            className="text-center cursor-pointer select-none"
                                            onClick={() => handleSort("Country")}
                                        >
                                            Country
                                            {sortBy === "Country" && (
                                                sortDirection === "asc" ? <ChevronUp className="inline h-4 w-4 ml-1" /> : <ChevronDown className="inline h-4 w-4 ml-1" />
                                            )}
                                        </TableHead>
                                        <TableHead
                                            className="text-center cursor-pointer select-none"
                                            onClick={() => handleSort("Disaster_Count")}
                                        >
                                            Disaster Count
                                            {sortBy === "Disaster_Count" && (
                                                sortDirection === "asc" ? <ChevronUp className="inline h-4 w-4 ml-1" /> : <ChevronDown className="inline h-4 w-4 ml-1" />
                                            )}
                                        </TableHead>
                                        <TableHead
                                            className="text-center cursor-pointer select-none"
                                            onClick={() => handleSort("Total_Deaths")}
                                        >
                                            Total Deaths
                                            {sortBy === "Total_Deaths" && (
                                                sortDirection === "asc" ? <ChevronUp className="inline h-4 w-4 ml-1" /> : <ChevronDown className="inline h-4 w-4 ml-1" />
                                            )}
                                        </TableHead>
                                        <TableHead
                                            className="text-center cursor-pointer select-none"
                                            onClick={() => handleSort("Total_Damage")}
                                        >
                                            Total Damage (000 US$)
                                            {sortBy === "Total_Damage" && (
                                                sortDirection === "asc" ? <ChevronUp className="inline h-4 w-4 ml-1" /> : <ChevronDown className="inline h-4 w-4 ml-1" />
                                            )}
                                        </TableHead>
                                        <TableHead
                                            className="text-center cursor-pointer select-none"
                                            onClick={() => handleSort("Avg_Recovery_Days")}
                                        >
                                            Avg Recovery Days
                                            {sortBy === "Avg_Recovery_Days" && (
                                                sortDirection === "asc" ? <ChevronUp className="inline h-4 w-4 ml-1" /> : <ChevronDown className="inline h-4 w-4 ml-1" />
                                            )}
                                        </TableHead>
                                        <TableHead
                                            className="text-center cursor-pointer select-none"
                                            onClick={() => handleSort("Vulnerability_Index")}
                                        >
                                            Vulnerability Index
                                            {sortBy === "Vulnerability_Index" && (
                                                sortDirection === "asc" ? <ChevronUp className="inline h-4 w-4 ml-1" /> : <ChevronDown className="inline h-4 w-4 ml-1" />
                                            )}
                                        </TableHead>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    {loading ? (
                                        <TableRow>
                                            <TableCell colSpan={6} className="text-center py-8">
                                                Loading vulnerability data...
                                            </TableCell>
                                        </TableRow>
                                    ) : error ? (
                                        <TableRow>
                                            <TableCell colSpan={6} className="text-center text-red-500 py-8">
                                                {error}
                                            </TableCell>
                                        </TableRow>
                                    ) : data.length === 0 ? (
                                        <TableRow>
                                            <TableCell colSpan={6} className="text-center text-gray-500 py-8">
                                                No vulnerability data found.
                                            </TableCell>
                                        </TableRow>
                                    ) : (
                                        data.map((item) => (
                                            <TableRow key={item.Country} className="hover:bg-gray-50">
                                                <TableCell className="text-center font-medium">{item.Country}</TableCell>
                                                <TableCell className="text-center">{item.Disaster_Count.toLocaleString()}</TableCell>
                                                <TableCell className="text-center">{item.Total_Deaths.toLocaleString()}</TableCell>
                                                <TableCell className="text-center">{item.Total_Damage.toLocaleString()}</TableCell>
                                                <TableCell className="text-center">{item.Avg_Recovery_Days.toFixed(1)}</TableCell>
                                                <TableCell className="text-center">
                                                    <div className="flex items-center justify-center gap-2">
                                                        <span className="font-medium">{item.Vulnerability_Index.toFixed(2)}</span>
                                                        <Badge variant={getVulnerabilityBadgeVariant(item.Vulnerability_Index)}>
                                                            {getVulnerabilityLabel(item.Vulnerability_Index)}
                                                        </Badge>
                                                    </div>
                                                </TableCell>
                                            </TableRow>
                                        ))
                                    )}
                                </TableBody>
                            </Table>
                        </div>

                        <div className="flex items-center justify-between pt-4">
                            <p className="text-sm text-muted-foreground">
                                Showing {startIndex + 1} to {Math.min(startIndex + itemsPerPage, totalItems)} of {totalItems} countries
                            </p>
                            <div className="flex items-center gap-2">
                                <button
                                    onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                                    disabled={currentPage === 1}
                                    className="px-3 py-1 text-sm border rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 transition-colors"
                                >
                                    Previous
                                </button>
                                <span className="text-sm">
                                    Page {currentPage} of {totalPages}
                                </span>
                                <button
                                    onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                                    disabled={currentPage === totalPages}
                                    className="px-3 py-1 text-sm border rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 transition-colors"
                                >
                                    Next
                                </button>
                            </div>
                        </div>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
} 